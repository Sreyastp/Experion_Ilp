MongoDB

--Display Databases
show dbs

--CREATE databases
use experionDB

---see current db name
db

--RDBMS 
	-- database - 				table
		record
	--database
		Collection
		document
--Display collections
show collections

--Create Collection
db.createCollection('customer');

- Show collections
show collections

--Drop Database
db.dropDatabase()

--Remove Collection
db.customer.drop()

--CREATE documents
-- CRUD
	- Create
	- Read / Retrieve
	- Update
	- Delete
-- Create a document
-- INSERT - RDBMS

---
	first_name varchar2(40)

---customer schema --- Key - Value
{
	first_name: "Yadhu",		---single
	last_name: "Krishnan",
	memberships: ["Gold", "Siver"],	---array
	address:{
		  houseName: "",	
		  street: "",
		  city: ""
		},			-- Object
	contacts: [
			{ name: "", mobile: "", group: "c"},
			{ name: "", group: "w" },
			{ name: ""}
		  ]			--- array + object
}

class - customer , address, contacts

Object-Oriented-Model
class Customer{
	
	string first_name;
	string last_name;
	string[] memberships;
	Address address;
	Contact contacts;
	
}

Development Stage:
	based on requirments --- it may change--- out 


--d
db.customer.find().pretty()isplay documents


db.customer.insert(
{first_name: 'Samson',last_name: 'Sung2',age: 24,gender:"Male"}
);

-- Multi Insert
db.customer.insert(
    [
	{first_name: 'Mark',last_name: 'Mathew'},
	{first_name: 'Mike',last_name: 'Philip',address:"Kerala"},
	{first_name: 'Samson',last_name: 'Sung',age: 45,gender:"Male"},
	{first_name: 'George',last_name: 'John',gender:"Male"}
    ]
)

// Product
	name		- string
	price		- number
	quantity	- number
	status		- boolean
	date		- date ISODate('2017-05-13T00:00:00Z')
	categoryid	- number
	
--- insert 7 documents -- 30 questions	

-- find -- first_name
db.customer.find({first_name: 'Yadhu'})

--Exists
db.customer.find({gender: {$exists: false}})

--No having an address
$exists
db.customer.find({address: {$exists: false}})

-- UPDATE
db.customer.find({first_name: 'Mark'}).pretty();
$set

// justone: true
db.customer.update({first_name: 'Mark'},{$set:{age: 25}})

//$inc
db.customer.update({first_name: 'Mark'},{$inc:{age: 5}})

$unset
db.customer.update({first_name: 'Mark'},{$unset:{age: 1}})

--upsert-- NOT found
--inserting 

db.customer.find({first_name: "Jack"}).pretty();

db.customer.update({first_name: "Jack"},
{first_name: 'Jack', last_name: 'Mathew', gender: 'Male'},{upsert: true}
);


db.customer.update({first_name: "Jack"},
{first_name: 'Jack2', last_name: 'Mathew2'}
);

--Rename
$rename
db.customer.update({first_name: 'Jack'}, {$rename: {gender: 'sex'}}
)

--UpdateMany()--rename

--Remove ---delete

//Remove all
db.customer.remove(
{first_name: 'Jack'})

//Remove Single
db.customer.remove(
{first_name: 'Samson'},{justOne: true})


---OR Search Criteria condition
db.customer.find(
{$or: [{first_name: 'Samson'},
{first_name: 'Mark'}]}
).pretty();

$gt
$lt

db.customer.update(
{first_name: 'Mike'},
{$set:{age:30}}
);

db.customer.find(
{age: {$lt:30}}
).pretty();


db.customer.insert(
[
	{
		first_name:"Sharon",
		last_name:"Thompson",
		gender: "Female",
		age: 37,
		address:{
			street: "199 Willis St",
			city: "Boston",
			state: "MA"	
			},
		memberships:["Gold","Silver","Bronze"],
		balance:9999.99	
	},
	{
		first_name:"Rakesh",
		last_name:"Sharma",
		gender: "Male",
		age: 76,
		address:{
			street: "432 Essex St3",
			city: "Lawrence3",
			state: "MA"	
			},
		memberships:["Gold","Bronze"],
		balance:3456.32	
	},
	{
		first_name:"Sanjay",
		last_name:"Das",
		gender: "Male",
		age: 23,
		address:{
			street: "SR Lane",
			city: "Trivandrum",
			state: "KL"	
			},
		memberships:["Silver","Bronze"],
		balance:3456.32	
	}
]
);


--Sorting
	--Asc
	--Desc

db.customer.find().sort(
{first_name: 1}).pretty();

--aggregate
--count()
	db.customer.find().count();
	--Count with Criteria
	db.customer.find({gender:"Male"}).count();

--sum()
--avg()
--min()
--max()

db.customer.find().limit(3).sort({first_name:-1}).pretty()

--Report should generate based on STATUS='A', display total amount ordered by the customer
---------------------------------	
cust_id : Total Amount: 
xyz1		100
abc1		75
---------------------------------

db.orders.aggregate(
	[	
		{ $match: {status : "A"} },	// criteria --where
		{ $group: {_id: "$cust_id", total: { $sum: "$amount"}}},
		{ $sort:  {total: -1}}
	]
)


